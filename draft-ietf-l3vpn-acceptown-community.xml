<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc comments="yes"?>
<?rfc compact="yes"?>
<?rfc inline="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc tocompact="yes"?>

<rfc category="std" docName="draft-ietf-l3vpn-acceptown-community-06.txt"
 ipr="pre5378Trust200902">

 <front>

  <title abbrev="accept-own">
    BGP ACCEPT_OWN Community Attribute</title>

  <author fullname="James Uttaro" initials="J.U."
            surname="Uttaro">
      <organization>ATT</organization>
      <address>
        <postal>
          <street>200 S. Laurel Avenue</street>
          <city>Middletown</city>
          <region>NJ</region>
          <code>07748</code>
          <country>USA</country>
        </postal>
        <email>uttaro@att.com</email>
      </address>
    </author>

  <author fullname="Pradosh Mohapatra" initials="P.M."
            surname="Mohapatra">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>170 W. Tasman Drive</street>
          <city>San Jose</city>
          <region>CA</region>
          <code>95134</code>
          <country>USA</country>
        </postal>
        <email>pmohapat@cisco.com</email>
      </address>
  </author>

  <author fullname="David J. Smith" initials="D.J.S."
            surname="Smith">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>111 Wood Avenue South</street>
          <city>Iselin</city>
          <region>NJ</region>
          <code>08830</code>
          <country>USA</country>
        </postal>
        <email>djsmith@cisco.com</email>
      </address>
  </author>

  <author initials="R" surname="Raszuk" fullname="Robert Raszuk">
      <organization>NTT MCL Inc.</organization>
      <address>
        <postal>
        <street>101 S Ellsworth Avenue Suite 350</street>
        <city>San Mateo</city>
        <region>CA</region>
        <code>94401</code>
        <country>US</country>
        </postal>
        <email>robert@raszuk.net</email>
      </address>
  </author>

  <author fullname="John Scudder" initials="J.S."
            surname="Scudder">
      <organization>Juniper Networks</organization>
      <address>
        <postal>
          <street>1194 N. Mathilda Ave</street>
          <city>Sunnyvale</city>
          <region>CA</region>
          <code>94089</code>
          <country>USA</country>
        </postal>
        <email>jgs@juniper.net</email>
      </address>
  </author>

  <date month="January" year="2013" />

  <abstract>
   <t>Under  certain  conditions  it  is  desirable for  a  BGP  route
    reflector to  be able  to modify  the Route Target  list of  a VPN
    route  that is distributed  by the  route reflector,  enabling the
    route reflector to  control how a route originated  within one VRF
    is imported into other  VRFs.  This technique works effectively as
    long as the  VRF that exports the  route is not on the  same PE as
    the VRF(s) that import the route.  However, due to the constraints
    of the BGP protocol,  it does not work if the two  are on the same
    PE.  This document describes  a modification  to the  BGP protocol
    allowing this technique to work when  the VRFs are on the same PE,
    allowing the technique to be  used in a standard manner throughout
    an autonomous system.</t>
  </abstract>

 </front>

 <middle>

  <section title="Introduction">
   <t>In certain  scenarios, a BGP speaker may  maintain multiple "VPN
    Routing         and         Forwarding         tables",         or
    VRFs <xref target="RFC4364"></xref>.  Under certain conditions, it
    is desirable for a route reflector  to be able to modify the Route
    Target (RT) list  of a VPN route that is  distributed by the route
    reflector,  enabling the route  reflector to  control how  a route
    originated within one VRF is  imported into other VRFs.  Though it
    is  possible  to  perform  such  policy control  directly  on  the
    originator, it  may be  operationally cumbersome in  an autonomous
    system with  a large number  of border routers having  complex BGP
    policies.</t>

   <t>The technique of the route reflector modifying the RT list works
    effectively as  long as the VRF  that exports the route  is not on
    the same PE  as the VRF(s) that import the  route. However, due to
    the constraints of  the BGP protocol, it does not  work if the two
    are   on   the  same   PE.    This   is   because  per   the   BGP
    specification   <xref  target="RFC4271"></xref>,  a   BGP  speaker
    rejects  prefix advertisements  received that  were  originated by
    itself.  In an autonomous  system with route reflectors, the route
    reflector  attaches  the  ORIGINATOR_ID  attribute to  the  UPDATE
    messages  so   that  if  such  prefix   advertisements  reach  the
    originator, the originator can  reject them by simply checking the
    ORIGINATOR_ID attribute.  The BGP specification also mandates that
    a  route should  not be  accepted from  a peer  when  the NEXT_HOP
    attribute matches the receiver's own "IP address".</t>

   <t>This  document  proposes a  modification  to  BGP's behavior  by
    defining a new  community <xref target="RFC1997"></xref> value, in
    order to allow the technique  of RT list modification by the route
    reflector to be used in a standard manner throughout an autonomous
    system,  irrespective of  whether the  VRFs  are on  the same,  or
    different PEs.</t>

   <section title="Requirements Language">
    <t>The key  words "MUST", "MUST NOT",  "REQUIRED", "SHALL", "SHALL
     NOT",   "SHOULD",  "SHOULD   NOT",   "RECOMMENDED",  "MAY",   and
     "OPTIONAL" in  this document are  to be interpreted  as described
     in <xref target="RFC2119">RFC 2119</xref>.</t>
   </section>
  </section> <!-- Introduction -->

  <section anchor="accept-own"
     title="ACCEPT_OWN Community">
   <t>This memo  defines a new BGP community,  ACCEPT_OWN, whose value
    as assigned  by IANA is  0xFFFF0001. Processing of  the ACCEPT_OWN
    community   SHOULD   be    controlled   by   configuration.    The
    functionality  SHOULD  default   to  being  disabled,  as  further
    specified in <xref target="configuration"></xref>.</t>

   <section anchor="route_acceptance" title="Route Acceptance">
    <t>A  router MAY accept  a route  whose ORIGINATOR_ID  or NEXT_HOP
     value  matches  that of  the  receiving  speaker  if all  of  the
     following are true:</t>
    <t>
     <list style="symbols">
      <t>Processing  of   the  ACCEPT_OWN  community   is  enabled  by
       configuration.</t>
      <t>The route in question carries the ACCEPT_OWN community.</t>
      <t>The route in question was originated from a source VRF on the
       router    (as    determined    by    inspecting    the    Route
       Distinguisher).</t>
      <t>The route in question is  targeted to one or more destination
       VRFs  on the  router  (as determined  by  inspecting the  Route
       Target(s)).</t>
      <t>At  least one destination  VRF is  different from  the source
       VRF.</t>
     </list>
    </t>
    <t>A route MUST  never be accepted back into  its source VRF, even
     if it  carries one or more  Route Targets (RTs)  which match that
     VRF.</t>
   </section>

   <section anchor="propagation"
         title="Propagating ACCEPT_OWN Between Address Families">
    <t>The ACCEPT_OWN  community controls propagation  of routes which
     can be associated with a  source VRF by inspection of their Route
     Distinguisher and with a target  VRF by inspection of their Route
     Target list (for example VPN routes with a SAFI of 128). As such,
     it  SHOULD  NOT  be  attached  to  any  routes  which  cannot  be
     associated with a source VRF.  This implies that when propagating
     routes  into  a  VRF,  the  ACCEPT_OWN community  should  not  be
     propagated.   Likewise,  if   a  route  carrying  the  ACCEPT_OWN
     community is received  in an address family which  does not allow
     the source VRF to be  looked up, the ACCEPT_OWN community MUST be
     discarded. An OPTIONAL message may be logged in this case.</t>
   </section>

   <section anchor="configuration"
         title="Configuration Control">
    <t>ACCEPT_OWN handling SHOULD  be controlled by configuration, and
     SHOULD default to being disabled.  When ACCEPT_OWN is disabled by
     configuration (either explicitly or  by default), the router MUST
     NOT   apply   the  special   route   acceptance  rules   detailed
     in  <xref target="route_acceptance"></xref>.   The  router SHOULD
     still      apply     the      propagation      rules     detailed
     in <xref target="propagation"></xref>.</t>
   </section>
  </section>

  <section anchor="decision"
         title="Decision Process">
   <t>If a BGP  speaker supports ACCEPT_OWN and is  configured for the
    extensions  defined  in  this  document,  the  following  step  is
    inserted  after the  LOCAL_PREF  comparison step  in BGP  decision
    process:</t>
   <t>
    <list style="empty">
     <t>When comparing  a pair  of routes for  a BGP  destination, the
      route attached  with ACCEPT_OWN community is  preferred over the
      route that does not have the community.</t>
    </list>
   </t>
   <t>In   all   other   respects,   the  decision   process   remains
    unchanged. This  extra step MUST  only be invoked during  the best
    path          selection         process          of         VPN-IP
    routes <xref target="RFC4364"></xref> (i.e. it MUST NOT be invoked
    for the best path selection of "imported" IP routes in a VRF). The
    purpose of the extra step is  to allow the paths advertised by the
    route reflector  with ACCEPT_OWN community to be  selected as best
    over other  paths that  the BGP speaker  may have  received, hence
    enabling the applications ACCEPT_OWN is designed for.</t>
  </section>

  <section anchor="deployment"
         title="Deployment Considerations">
   <t>The ACCEPT_OWN community as described in this document is useful
    within a  single autonomous  system which uses  a single  layer of
    route  reflectors.   Its use  with  hierarchical route  reflectors
    would require further  specification and is out of  scope for this
    document.  Likewise, its use across multiple autonomous systems is
    out of scope for this document.</t>
  </section>

  <section anchor="applications"
         title="Other Applications">
   <t>This approach  may also be  relevant to other scenarios  where a
    BGP speaker maintains multiple  routing contexts using an approach
    different from that of  <xref target="RFC4364"></xref>, as long as
    the specific approach in use has the property that the BGP speaker
    originates and  receives routes  within a particular  context.  In
    such a case,  "VRF" in this document should  be understood to mean
    whatever  construct provides  a  routing context  in the  specific
    technology  under consideration.  Likewise,  "Route Distinguisher"
    should be  understood to mean whatever construct  allows a route's
    originator to  associate that route  with its source  context, and
    "Route  Target" should  be understood  to mean  whatever construct
    allows a route to be targeted for import into a context other than
    its source.</t>
  </section>

  <section anchor="security"
         title="Security Considerations">
   <t>ACCEPT_OWN  as  described above  permits  a  router's own  route
    prefix to be advertised to a different VRF on that router. In this
    respect, such a route is similar to any other BGP route and shares
    the  same set  of security  vulnerabilities and  concerns.  No new
    fundamental security issues are introduced by ACCEPT_OWN.</t>
  </section>

  <section anchor="iana"
         title="IANA Considerations">
   <t>IANA  has  assigned the  value  0xFFFF0001  from BGP  well-known
    communities registry for  ACCEPT_OWN community. No additional IANA
    action is required.
   </t>
  </section>

  <section title="Acknowledgments">
   <t>The  authors would like  to thank  Yakov Rekhter,  Jim Guichard,
    Clarence  Filsfils, John  Mullooly, Jeff  Haas, Pranav  Mehta, and
    Tamas  Mondal for  their  valuable comments  and suggestions.  The
    decision process  changes were suggested by Pranav  Mehta to solve
    the remote extranet problem.</t>
  </section>

 </middle>

 <back>
  <references title="Normative References">
   <?rfc include="reference.RFC.1997"?>
   <?rfc include="reference.RFC.2119"?>
   <?rfc include="reference.RFC.4271"?>
   <?rfc include="reference.RFC.4364"?>
  </references>

  <section anchor="extranet"
    title="Local Extranet Application (non-informative)">
   <t>One of the applications  for this behavior is auto-configuration
    of  extranets within  MPLS  VPN networks.  Consider the  following
    topology:

    <figure align="center" anchor="extranet_app"
              title="Extranet Application">
        <artwork align="left"><![CDATA[

CE1 --------+
            |
           (VRF 1, RD 1, RT 1)
                    PE1 ................... RR
           (VRF 2, RD 2, RT 2)
            |
CE2 --------+
            ]]></artwork>
    </figure>

    Within  the   above  topology,  PE1  receives  a   prefix  X  from
    CE1. Prefix X is installed in VRF 1 and is advertised to the route
    reflector with route distinguisher (RD)  1 and route target (RT) 1
    as configured on  PE1. The requirement is to  import prefix X into
    VRF  2  and  advertise  it  to  CE2 in  support  of  extranet  VPN
    connectivity between CE1/VRF1 and CE2/VRF2. Current BGP mechanisms
    for MPLS  VPNs<xref target="RFC4364"></xref> require  changing the
    import RT  value and/or import policy  for VRF 2 on  PE1.  This is
    operationally  cumbersome in  a  network with  a  large number  of
    border routers having complex BGP policies.</t>

   <t>Alternatively,  using the  new ACCEPT_OWN  community  value, the
    route reflector can simply re-advertise  prefix X back to PE1 with
    RT 2 appended.  In this way,  PE1 will accept prefix X despite its
    ORIGINATOR_ID or NEXT_HOP value, import  it into VRF 2 as a result
    of RT  2, and  will then determine  the correct  adjacency rewrite
    within VRF 1  based on the RD value (1) and  the prefix. Note that
    the RT  1 value  originally attached to  the route will  simply be
    ignored since associated with the source VRF 1. The same operation
    needs also  to happen in the  reverse direction (VRF  1 learning a
    route  from VRF  2) to  achieve establishment  of an  extranet VPN
    strictly via  the route reflector without changing  the BGP policy
    of PE1 in any way.</t>

   <t>A router  performing such an  extranet application can  accept a
    route with its own ORIGINATOR_ID or NEXT_HOP value only if the VRF
    in which the router originated the route is different than the VRF
    in which the router accepts the re-advertised route.</t>
  </section>
 </back>
</rfc>
